Instructions guide:
Registers are 0, 1, 2 and 3. Do not write r1, r2, or r3, just the number.
Any arguments that are "v" are numbers you can write, like 123, 300, 690, etc. (maximum is 65536) (this cpu only handles whole numbers)
!! Instructions begin at 0. So, the very first instruction is instruction 0. Keep this in mind when jumping! !!

ADD r1 r2 rOUT:
  Adds registers r1 and r2, sending the result to rOUT

SUB r1 r2 rOUT:
  Subtracts r2 from r1, sending the result to rOUT

MUL r1 r2 rOUT:
  Multiplies r1 and r2, sending result to rOUT

DIV r1 r2 rOUT:
  Divides r1 by r2, sending result to rOUT

AND r1 r2 rOUT:
  Does (r1 AND r2), sending result to rOUT

OR r1 r2 rOUT:
  Does (r1 OR r2), sending result to rOUT

OUT r1:
  Sends the value in r1 to the output of the CPU.

INS v r1:
  Loads the number V into r1

IAD r1 v rOUT:
  Adds r1 + the number V, sending result to rOUT

ISB r1 v rOUT:
  Subtracts the number V from r1, sending result to rOUT

IMT r1 v rOUT:
  Multiplies r1 and the number V, sending result to rOUT

IDV r1 v rOUT:
  Divides r1 by the number V, sending result to rOUT

ANDI r1 v rOUT:
  Does (r1 AND V), sending result to rOUT

ORI r1 v rOUT:
  Does (r1 OR V), sending result to rOUT

INC r1:
  Increases the register r1 by 1.

DEC r1:
  Decreases the register r1 by 1

INP r1:
  Loads the input of the CPU into register.

Jumping commands:

JMP v:
  Jumps the program counter to V

JMPZ r1 v:
  Jumps the program counter to V if r1 is zero

JMPC r1 arg r2 v:
  This one is a bit complicated:
  Arg can be '>', '==', or '<'
  For example, 1 > 3 checks if the value in register 1 is greater than the one in register 3
  If the operation is TRUE, the program jumps to V. Otherwise, it continues as usual.


